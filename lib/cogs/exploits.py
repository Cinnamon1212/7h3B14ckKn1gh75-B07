## Discord imports
import discord
from discord import Embed
from discord.ext import commands
from discord.ext.commands import cooldown, BucketType
from pygicord import Paginator
## Async imports
import asyncio
from aiohttp import request
## Util imports
import json
import shodan
import math

with open('secrets.json', 'r') as secrets:
    data = secrets.read()
shodanapikey = json.loads(data)
apikey = shodanapikey['shodankey']
api = shodan.Shodan(apikey)

class exploits(commands.Cog):
    def __init__(self, client):
        self.client = client


    @commands.command(name="shodanlookup", description="Looks up an IP using the shodan API", aliases=["shodan"])
    async def shodanlookup(self, ctx, ip):
        info = api.host(ip)
        embed = discord.Embed(title=f"Information for {ip}",
                      colour=discord.Colour.red(),
                      inline=False)
        if info['os'] is None:
            embed.add_field(name="Operating system:", value="OS cannot be identified")
        else:
            embed.add_field(name="Operating system:", value=str(info['os']))
        embed.add_field(name="ports: ", value=", ".join(map(str,info['ports'])))
        embed.add_field(name="Hostnames: ", value=", ".join(map(str,info['hostnames'])))
        embed.add_field(name="Domains: ", value=", ".join(map(str,info['domains'])))
        embed.add_field(name="ISP: ", value=str(info['isp']))
        embed.add_field(name="Country: ", value=str(info['country_name']))
        time = ctx.message.created_at
        embed.set_footer(text=f"Asked by {ctx.author.name} " + time.strftime("%d/%m/%y %X"))
        await ctx.send(embed=embed)

    @shodanlookup.error
    async def shodanlookup_error(self, ctx, error):
        text = f"Usage: {discord.PREFIX}shodanlookup [IP]"
        if isinstance(error, commands.MissingRequiredArgument):
            await ctx.send(f"```Please provide an IP\n{text}```")
        elif isinstance(error, commands.BadArgument):
            await ctx.send(f"```Please ensure you provide an IP\{text}```")
        elif isinstance(error, commands.CommandInvokeError):
            await ctx.send(f"```The API could not check that IP\n{text}```")
            raise error
        else:
            raise error

    @commands.command(name="cvesearch", description="Search CVEs on https://cve.circl.lu/", alises=["cveid", "cvelookup"])
    async def cvesearch(self, ctx, search_type, query=""):
        text = f"""
Usage: {discord.PREFIX}cvesearch [search type] (query)
CVE Options:
latest - fetch latest CVE # Returns latest CVE
browse - browse vendors (Microsoft) # returns list of vendor products
id - fetch CVE by ID (CVE-2014-0160)
search - search for a CVE (microsoft/office) # Not working, try {discord.PREFIX}exDB [query]
dbinfo - Returns a list of database updates
CVE info from: https://cve.circl.lu/
        """
        search_type = search_type.lower()
        if query == "":
            if search_type == "dbinfo":
                async with request("GET", f"https://cve.circl.lu/api/dbInfo", headers={}) as r:
                    if r.status == 200:
                        data = await r.json()
                        embed = Embed(title="Database information", description="https://cve.circl.lu/", colour=discord.Colour.red())
                        embed.add_field(name="Last CAPEC update: ", value=data['capec']['last_update'], inline=False)
                        embed.add_field(name="Last CPE update: ", value=data['cpe']['last_update'], inline=False)
                        embed.add_field(name="Last CPE other update: ", value=data['cpeOther']['last_update'], inline=False)
                        embed.add_field(name="Last CVE update: ", value=data['cves']['last_update'], inline=False)
                        embed.add_field(name="Last CWE update: ", value=data['cwe']['last_update'], inline=False)
                        embed.add_field(name="Last via 4 update: ", value=data['via4']['last_update'], inline=False)
                        await ctx.send(embed=embed)
                    else:
                        await ctx.send(f"```There was an error while fetching database info\n{text}```")
            elif search_type == "latest":
                async with request("GET", f"https://cve.circl.lu/api/last/1", headers={}) as r:
                    if r.status == 200:
                        data = await r.json()
                        last = data[0]
                        product = last['vulnerable_product']
                        prod_end = math.ceil(len(product)) / 2
                        products = product[0:int(prod_end)]
                        if products == []:
                            products = "N/A"
                        impact = last['impact']
                        if not "availability" in impact.keys():
                            impact['availability'] = "N/A"
                        if not "confidentiality" in impact.keys():
                            impact["confidentiality"] = "N/A"
                        if not "integrity" in impact.keys():
                            impact["integrity"] = "N/A"
                        try:
                            access = last['access']
                        except KeyError:
                            pass
                        else:
                            if not "authentication" in access.keys():
                                access["authentication"] = "N/A"
                            if not "complexity" in access.keys():
                                access["complexity"] = "N/A"
                            if not "vector" in access.keys():
                                access["vector"] = "N/A"
                        ref = last['references']
                        ref = ref[0:3]
                        ref = "\n".join(ref)
                        summary = last['summary']
                        summary = "".join(summary)
                        CVEReport = f"""
CVE {last['id']} ({last['Published']})
Vulnerability score: {last['cvss']}
Impact:
    Availability: {impact['availability']}
    Confidentiality: {impact['confidentiality']}
    Integrity: {impact['integrity']}
Access:
    Auth: {access['authentication']}
    Complexity: {access['complexity']}
    Vector: {access['vector']}
Product(s):
    {products}
References:
    {ref}
Summary:
{summary} """
                        if len(CVEReport) <= 1994:
                            await ctx.send(f"```{CVEReport}```")
                        else:
                            filename = f"{discord.PREFIX}CVEReports/{ctx.author.id}.txt"
                            async with aiofiles.open(filename, 'a') as f:
                                await f.write(CVEReport)
                            await ctx.author.send(file=discord.File(filename))
                            os.remove(filename)
                    else:
                        await ctx.send(f"```There was an error while fetching the latest CVEs\n{text}```")
            else:
                await ctx.send(f"```Please enter a query\n{text}```")
        else:
            if search_type == "browse":
                async with request("GET", f"https://cve.circl.lu/api/browse/{query}", headers={}) as r:
                    if r.status == 200:
                        data = await r.json()
                    else:
                        data = None
                        await ctx.send(f"```There was an error while browsing for {query}\n{text}```")
                    if data is not None:
                            if 'product' in data:
                                products = data['product']
                                embed = Embed(title=f"Browse results for {query}", colour=discord.Colour.red())
                                x = 1
                                i = 0
                                while i != 25:
                                    try:
                                        z = products[i]
                                        embed.add_field(name=f"Product #{x}", value=z, inline=False)
                                        x += 1
                                        i += 1
                                    except IndexError:
                                        break
                                embed.set_footer(text="CVE results from https://cve.circl.lu/")
                                await ctx.send(embed=embed)
                    else:
                        await ctx.send(f"```Unable to find a result for {query}\n{text}```")
            elif search_type == "id":
                async with request("GET", f"https://cve.circl.lu/api/cve/{query}", headers={}) as r:
                    if r.status == 200:
                        data = await r.json()
                        pages = []
                        overview = Embed(title=f"CVE Overview: {query}", colour=discord.Colour.red())
                        overview.add_field(name="Last modified: ", value=data['Modified'], inline=False)
                        overview.add_field(name="Published: ", value=data['Published'], inline=False)
                        overview.add_field(name="Assigner: ", value=data['assigner'], inline=False)
                        access = data["access"]
                        try:
                            overview.add_field(name="Authentication: ", value=access['authentication'], inline=False)
                        except KeyError:
                            overview.add_field(name="Authentication: ", value="N/A", inline=False)
                        try:
                            overview.add_field(name="Complexity: ", value=access['complexity'], inline=False)
                        except KeyError:
                            overview.add_field(name="Complexity: ", value="N/A", inline=False)
                        try:
                            overview.add_field(name="Vector: ", value=access['vector'])
                        except KeyError:
                            overview.add_field(name="Vector: ", value="N/A")
                        overview.set_footer(text="CVE results from https://cve.circl.lu/")
                        pages.append(overview)

                        refs = data['references']
                        try:
                            refs = refs[0:10]
                        except IndexError:
                            pass
                        references = Embed(title="References", colour=discord.Colour.red())
                        for r in refs:
                            references.add_field(name="⠀", value=r, inline=False)
                        pages.append(references)
                        if "capec" in data.keys():
                            capecs = data['capec']
                            try:
                                capecs = capecs[0:3]
                            except IndexError:
                                pass
                            for c in capecs:
                                embed = Embed(title=c['name'], colour=discord.Colour.red())
                                embed.add_field(name="ID: ", value=c['id'], inline=False)
                                embed.add_field(name="Prerequisites", value=c['prerequisites'], inline=False)
                                summary = "".join(c['summary'])
                                embed.add_field(name="Summary: ", value=summary, inline=False)
                                solution = "".join(c['solutions'])
                                embed.add_field(name="Solutions: ", value=solution, inline=False)
                                pages.append(embed)
                        paginator = Paginator(pages=pages)
                        await paginator.start(ctx)
                    else:
                        await ctx.send(f"```There was an error while finding CVE ID: {query}\n{text}```")
            elif search_type == "search":
                await ctx.send("Not currently working..")
            else:
                await ctx.send(f"```Invalid search type\n{text}```")

    @cvesearch.error
    async def cvesearch_error(self, ctx, error):
        text = f"""
Usage: {discord.PREFIX}cvesearch [search type] (query)
CVE Options:
latest - fetch latest CVE # Returns latest CVE
browse - browse vendors (Microsoft) # returns list of vendor products
id - fetch CVE by ID (CVE-2014-0160)
search - search for a CVE (microsoft/office) # Not working, try {discord.PREFIX}exDB [query]
dbinfo - Returns a list of database updates
CVE info from: https://cve.circl.lu/
        """
        if isinstance(error, commands.MissingRequiredArgument):
            await ctx.send(f"```{text}```")
        else:
            await ctx.send(f"```An unknown error has occured!\n{text}```")
            raise error

    @commands.command(name="exploitdb", description="Search exploitdb", aliases=["exDB"])
    async def exploitdb(self, ctx, *, query):
        q=query,
        cx="52b54907be70ff59c"
        url = f"https://www.googleapis.com/customsearch/v1?key={apikey}&cx={cx}&q={q}&start=1"
        async with request("GET", url) as response:
            search_response = await response.json()
        embed = Embed(title=f"top 10 search results for {query}",
                      colour=discord.Colour.red())
        embed.set_thumbnail(url="https://www.exploit-db.com/images/spider-white.png")
        for item in search_response['items']:
            embed.add_field(name=item['title'], value=f"{item['snippet']} [Link]({item['link']})", inline=False)
        await ctx.send(embed=embed)

    @exploitdb.error
    async def exdb_error(self, ctx, error):
        text = "Usage: ./exdb [query]"
        if isinstance(error, commands.MissingRequiredArgument):
            await ctx.send(f"```Please enter something to query\n{text}```")
        elif isinstance(error, commands.CommandInvokeError):
            await ctx.send(f"```No search result!\n{text}```")
        else:
            raise

def setup(client):
    client.add_cog(exploits(client))
